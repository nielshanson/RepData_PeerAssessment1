result = predict(logit_fit,test_dat,type="response")
ypred=ifelse(result < 0.5, 0, 1)
error = sum(ypred != test_dat$test_classes) / length(test_dat$test_classes)
return(error)
}
errors = replicate(100, svm_error())
print(errors)
print(mean(errors))
install.packages("roxygen2")
library("roxygen2")
n = 100
beta = 1e-1
beta
X = rand(1,n)
?sample
?random
runif(1,0,1)
runif(100,0,1)
rnorm(1)
a = c(1,2,3)
b = c(1,2,3)
a %*% b
t(a) %*% b
t(a) %*% t(b)
a %*% t(b)
rnorm(n)
t = t(w) %*% X + b + beta * rnorm(n)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
t
seq(min(X)-1, max(X)+1, length.out=n)
lm(t~X)
X
t
lm(t~X)
lm(X~t)
x
x
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
x
lm(t~X)
length(t)
length(X)
plot(t,X)
plot(t,X)
plot(t,X, pty=16)
plot(t,X, cty=16)
?par
plot(t,X, pch=16)
plot(t,X, pch=7)
plot(t,X, pch=8)
plot(t,X, pch=20)
plot(t,X, pch=20, col="blue")
plot(X,y, pch=20, col="blue")
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t)
dat <- cbind(t(X),t(t))
X
t(X)
X
t
dat <- cbind(X,t(t))
dat
head(dat)
t <- t(t)
dat <- cbind(X,t) # data
head(dat)
t
head(t)
names(dat) <-c("X","t")
dat
row.names(dat) <-c("X","t")
dat
col.names(dat) <-c("X","t")
colnames(dat) <-c("X","t")
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
# scratch for chapter 3
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
# scratch for chapter 3
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
head(dat)
# scratch for chapter 3
# set random number
set.seed(12345)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
head(dat)
# scratch for chapter 3
# set random number
set.seed(12345)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
head(dat)
# scratch for chapter 3
# set random number
# set.seed(12345)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
head(dat)
# scratch for chapter 3
# set random number
# set.seed(12345)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
head(dat)
# scratch for chapter 3
# set random number
# set.seed(12345)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
head(dat)
# scratch for chapter 3
# set random number
# set.seed(12345)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
head(dat)
# scratch for chapter 3
# set random number
# set.seed(12345)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
head(dat)
set.seed(12345)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
head(dat)
lm(t~X, data=dat)
lm(t~X, data=data.frame(dat))
predict()
?predict
predict(fit, x)
fit <- lm(t~X, data=data.frame(dat))
predict(fit, x)
predict(fit, t(x))
predict(fit, x[1])
predict(fit, 1)
predict(fit)
plot(predict(fit))
plot(X,t, pch=20, col="blue")
points(predict(fit))
predict(fit,new)
new <- data.frame(X = x)
predict(fit,new)
new_t <- predict(fit,new, se.fit = TRUE)
points(x,new_t)
length(new_t)
new
new_t <- predict(fit,new, se.fit = TRUE)
new_t
new_t <- predict(fit,new, se.fit = TRUE)
points(x,new_t$fit)
lines(x,new_t$fit)
# set random number
set.seed(12345)
n = 100
beta = 1e-1
X = runif(n,0,1)
w = rnorm(1)
b = rnorm(1)
t = t(w) %*% X + b + beta * rnorm(n)
# t = w'*X+b+beta*randn(1,n);
x = seq(min(X)-1, max(X)+1, length.out=n) # test data
# x = linspace(min(X)-1,max(X)+1,n);   % test data
plot(X,t, pch=20, col="blue")
dat <- cbind(X,t(t)) # data
colnames(dat) <-c("X","t")
# liear model fit
fit <- lm(t~X, data=data.frame(dat))
new <- data.frame(X = x)
new_t <- predict(fit,new, se.fit = TRUE)
lines(x,new_t$fit)
lines(x,new_t$fit + new_t$fit + new_t$se.fit)
lines(x,new_t$fit + new_t$se.fit)
lines(x,new_t$fit - new_t$se.fit)
pred.w.plim <- predict(fit, new, interval = "prediction")
pred.w.plim
pred.w.plim
plot(x, pred.w.plim[,1])
plot(X,t, pch=20, col="blue")
lines(x, pred.w.plim[,1])
lines(x, pred.w.plim[,2])
lines(x, pred.w.plim[,3])
pred.w.clim <- predict(fit, new, interval = "confidence")
lines(x, pred.w.clim[,2])
lines(x, pred.w.clim[,3])
new_t <- predict(fit,new, interval="confidence")
new_t <- predict(fit,new, interval="confidence")
?par
setwd("~/Desktop/data_science/05_reproduce/assign/RepData_PeerAssessment1/")
# extract and load activity.csv file from activity.zip
act_data <- read.csv(unz("activity.zip", "activity.csv"))
act_data.no_na <- act_data[!is.na(act_data$steps),] # remove NAs
steps_per_day = tapply(act_data.no_na$steps, act_data.no_na$date, sum)
steps_per_day[is.na(steps_per_day)] = 0
# create a data frame
mean_total_steps<- round(mean(steps_per_day))
library(scales)
mean_steps_per_interval = tapply(act_data.no_na$steps, act_data.no_na$interval, mean)
plot(act_data.no_na$interval, act_data.no_na$steps, col = alpha("light blue", 0.25), pch=16)
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="black")
mean_steps_per_interval = tapply(act_data$steps, act_data$interval, mean)
plot(act_data$interval, act_data$steps, col = alpha("light green", 0.25), pch=16)
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="black")
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="black")
mean_steps_per_interval = tapply(act_data$steps, act_data$interval, mean)
plot(act_data$interval, act_data$steps, col = alpha("light green", 0.25), pch=16)
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="black")
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="black")
names(mean_steps_per_interval)
mean_steps_per_interval
act_data$interval
act_data$steps
names(mean_steps_per_interval)
length(names(mean_steps_per_interval))
288*5
24*60
act_data <- read.csv(unz("activity.zip", "activity.csv"))
act_data$steps
is.na(act_data$steps)
sum(is.na(act_data$steps)) /length(act_data$steps)
sum(is.na(act_data$steps)) /length(act_data$steps) * 100
round(sum(is.na(act_data$steps)) /length(act_data$steps) * 100, 2)
act_data$interval
act_data$date
act_data$date[1]
act_data$date[1] + 5
as.date(act_data$date)
as.Date(act_data$date)
as.Date(act_data$date)[1]
as.Date(act_data$date)[1]+5
as.Date(act_data$date)[1]+5min
?as.Date
as.Date(act_data$date)[1]+ as.Date("02-06-09 12:45:40")
as.Date(act_data$date)[1]+ 0.01
as.Date(act_data$date)[1]+ 0.05
as.POSIXlt(act_data$date)[1]
as.POSIXlt(act_data$date)[1] +5
as.POSIXlt(act_data$date)[1] + (5*60)
as.POSIXlt(act_data$date)[1] + (act_data$interval[1]*60)
as.POSIXlt(act_data$date)[1] + (act_data$interval[1]*60)
as.POSIXlt(act_data$date)[1] + (as.numeric(act_data$interval[1])*60)
(as.numeric(act_data$interval[1])*60)
act_data$interval[1]
act_data$interval[2]
as.POSIXlt(act_data$date)[1] + (as.numeric(act_data$interval[2])*60)
as.POSIXlt(act_data$date) + as.numeric(act_data$interval)*60
time_of_day<- as.POSIXlt(act_data$date) + as.numeric(act_data$interval)*60
time(time_of_day)
time_of_day
hour(time_of_day)
mean_steps_per_interval_imp <- tapply(act_data$steps, act_data$interval, mean)
plot(act_data$interval, act_data$steps, col = alpha("light green", 0.25),
pch=16,xlab="Interval", ylab="Number of Steps",
main="Averaage number of steps per 5-min interval (imputed)")
lines(names(mean_steps_per_interval_imp), mean_steps_per_interval_imp, lwd=3, col="black")
lines(names(mean_steps_per_interval_imp), mean_steps_per_interval_imp, lwd=3, col="black", lty=2)
setwd("~/Desktop/data_science/05_reproduce/assign/RepData_PeerAssessment1/")
# extract and load activity.csv file from activity.zip
act_data <- read.csv(unz("activity.zip", "activity.csv"))
act_data.no_na <- act_data[!is.na(act_data$steps),] # remove NAs
percent_na <- round(sum(is.na(act_data$steps)) /length(act_data$steps) * 100, 2) # note percent missing
steps_per_day = tapply(act_data.no_na$steps, act_data.no_na$date, sum)
steps_per_day[is.na(steps_per_day)] = 0
# create a data frame
mean_total_steps<- round(mean(steps_per_day))
library(scales) # for alpha() function
mean_steps_per_interval = tapply(act_data.no_na$steps, act_data.no_na$interval, mean)
plot(act_data.no_na$interval, act_data.no_na$steps, col = alpha("light green", 0.25), pch=16)
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="black")
set.seed(12345) # set random seed for replocation
missing_set <- act_data[is.na(act_data$steps),] # NAs samples to impute
non_missing_set <- act_data[!is.na(act_data$steps),] # observed samples
# interate through the missing_set, noting the interval for each iteraction,
# and taking a random sample from the non_missing_set and imputing that value
# into the original data frame act_data
for (i in row.names(missing_set) ) {
# note interval
missing_interval = act_data[i,"interval"]
# create a sample set for the missing interval
sample_set <- non_missing_set[non_missing_set$interval==missing_interval,"steps"]
# take sample
samp <- sample(sample_set, size=1, replace=TRUE)
# impute value in data frame
act_data[i, "steps"] = samp
}
mean_steps_per_interval_imp <- tapply(act_data$steps, act_data$interval, mean)
plot(act_data$interval, act_data$steps, col = alpha("light green", 0.25),
pch=16,xlab="Interval", ylab="Number of Steps",
main="Averaage number of steps per 5-min interval (imputed)")
lines(names(mean_steps_per_interval_imp), mean_steps_per_interval_imp, lwd=3, col="black")
lines(names(mean_steps_per_interval_imp), mean_steps_per_interval_imp, lwd=3, col="black", lty=2)
mean_steps_per_interval_imp <- tapply(act_data$steps, act_data$interval, mean)
plot(act_data$interval, act_data$steps, col = alpha("light green", 0.25),
pch=16,xlab="Interval", ylab="Number of Steps",
main="Averaage number of steps per 5-min interval (imputed)")
lines(names(mean_steps_per_interval_imp), mean_steps_per_interval_imp, lwd=3, col="black")
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="black", lty=2)
mean_steps_per_interval_imp <- tapply(act_data$steps, act_data$interval, mean)
plot(act_data$interval, act_data$steps, col = alpha("light green", 0.25),
pch=16,xlab="Interval", ylab="Number of Steps",
main="Averaage number of steps per 5-min interval (imputed)")
lines(names(mean_steps_per_interval_imp), mean_steps_per_interval_imp, lwd=3, col="black")
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="red")
mean_steps_per_interval_imp <- tapply(act_data$steps, act_data$interval, mean)
plot(act_data$interval, act_data$steps, col = alpha("light green", 0.25),
pch=16,xlab="Interval", ylab="Number of Steps",
main="Averaage number of steps per 5-min interval (imputed)")
lines(names(mean_steps_per_interval_imp), mean_steps_per_interval_imp, lwd=3, col="black")
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="red")
legend(1,1,c("Avg. Steps","Avg. Steps (imputed)"), lwd=c(3,3),col=c("black","red"))
legend(c("Avg. Steps","Avg. Steps (imputed)"), lwd=c(3,3),col=c("black","red"))
?legend
mean_steps_per_interval_imp <- tapply(act_data$steps, act_data$interval, mean)
plot(act_data$interval, act_data$steps, col = alpha("light green", 0.25),
pch=16,xlab="Interval", ylab="Number of Steps",
main="Averaage number of steps per 5-min interval (imputed)")
lines(names(mean_steps_per_interval_imp), mean_steps_per_interval_imp, lwd=3, col="black")
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="red")
locator()
mean_steps_per_interval_imp <- tapply(act_data$steps, act_data$interval, mean)
plot(act_data$interval, act_data$steps, col = alpha("light green", 0.25),
pch=16,xlab="Interval", ylab="Number of Steps",
main="Averaage number of steps per 5-min interval (imputed)")
lines(names(mean_steps_per_interval_imp), mean_steps_per_interval_imp, lwd=3, col="black")
lines(names(mean_steps_per_interval), mean_steps_per_interval, lwd=3, col="red")
locator()
legend(83.67, 744.41, c("Avg. Steps","Avg. Steps (imputed)"), lwd=c(3,3),col=c("black","red"))
?legend
act_data$dayOfWeek = weekdays(as.Date(act_data$date)) # create dayOfWeek factor
act_data$weekend = (act_data$dayOfWeek %in% c("Saturday", "Sunday")) # create weekend factor
act_data_weekend = act_data[act_data$weekend == TRUE,] # weekend set
act_data_weekday = act_data[act_data$weekend == FALSE,] # weekday set
# calculate weekday and weekend means
mean_steps_per_interval_weekend = tapply(act_data_weekend$steps, act_data_weekend$interval, mean)
mean_steps_per_interval_weekday = tapply(act_data_weekday$steps, act_data_weekday$interval, mean)
# plot both the points
plot(act_data_weekend$interval, act_data_weekend$steps, col = alpha("salmon", 0.25), pch=16)
points(act_data_weekday$interval, act_data_weekday$steps, col = alpha("light blue", 0.25), pch=16)
# plot the averages
lines(names(mean_steps_per_interval_weekend), mean_steps_per_interval_weekend, lwd=3, col="red")
lines(names(mean_steps_per_interval_weekday), mean_steps_per_interval_weekday, lwd=3, col="blue")
# add a legend for lines
legend(83.67, 744.41, c("Weekend","Weekday"), lwd=c(3,3),col=c("salmon","light blue"))
act_data$dayOfWeek = weekdays(as.Date(act_data$date)) # create dayOfWeek factor
act_data$weekend = (act_data$dayOfWeek %in% c("Saturday", "Sunday")) # create weekend factor
act_data_weekend = act_data[act_data$weekend == TRUE,] # weekend set
act_data_weekday = act_data[act_data$weekend == FALSE,] # weekday set
# calculate weekday and weekend means
mean_steps_per_interval_weekend = tapply(act_data_weekend$steps, act_data_weekend$interval, mean)
mean_steps_per_interval_weekday = tapply(act_data_weekday$steps, act_data_weekday$interval, mean)
# plot both the points
plot(act_data_weekend$interval, act_data_weekend$steps, col = alpha("salmon", 0.25), pch=16,
main="Comparison of average weekend and weekday activity patterns",
xlab="5-min Interval", ylab="Number of Steps")
points(act_data_weekday$interval, act_data_weekday$steps, col = alpha("light blue", 0.25), pch=16)
# plot the averages
lines(names(mean_steps_per_interval_weekend), mean_steps_per_interval_weekend, lwd=3, col="salmon")
lines(names(mean_steps_per_interval_weekday), mean_steps_per_interval_weekday, lwd=3, col="light blue")
# add a legend for lines
legend(83.67, 744.41, c("Weekend","Weekday"), lwd=c(3,3),col=c("salmon","light blue"))
act_data$dayOfWeek = weekdays(as.Date(act_data$date)) # create dayOfWeek factor
act_data$weekend = (act_data$dayOfWeek %in% c("Saturday", "Sunday")) # create weekend factor
act_data_weekend = act_data[act_data$weekend == TRUE,] # weekend set
act_data_weekday = act_data[act_data$weekend == FALSE,] # weekday set
# calculate weekday and weekend means
mean_steps_per_interval_weekend = tapply(act_data_weekend$steps, act_data_weekend$interval, mean)
mean_steps_per_interval_weekday = tapply(act_data_weekday$steps, act_data_weekday$interval, mean)
# plot both the points
plot(act_data_weekend$interval, act_data_weekend$steps, col = alpha("salmon", 0.25), pch=16,
main="Comparison of average weekend and weekday activity patterns",
xlab="5-min Interval", ylab="Number of Steps")
points(act_data_weekday$interval, act_data_weekday$steps, col = alpha("light blue", 0.25), pch=16)
# plot the averages
lines(names(mean_steps_per_interval_weekend), mean_steps_per_interval_weekend, lwd=3, col="salmon")
lines(names(mean_steps_per_interval_weekday), mean_steps_per_interval_weekday, lwd=3, col="light blue")
# add a legend for lines
legend(83.67, 744.41, c("Weekend","Weekday"), lwd=c(3,3),col=c("salmon","light blue"))
act_data$dayOfWeek = weekdays(as.Date(act_data$date)) # create dayOfWeek factor
act_data$weekend = (act_data$dayOfWeek %in% c("Saturday", "Sunday")) # create weekend factor
act_data_weekend = act_data[act_data$weekend == TRUE,] # weekend set
act_data_weekday = act_data[act_data$weekend == FALSE,] # weekday set
# calculate weekday and weekend means
mean_steps_per_interval_weekend = tapply(act_data_weekend$steps, act_data_weekend$interval, mean)
mean_steps_per_interval_weekday = tapply(act_data_weekday$steps, act_data_weekday$interval, mean)
# plot both the points
plot(act_data_weekend$interval, act_data_weekend$steps, col = alpha("salmon", 0.25), pch=16,
main="Comparison of average weekend and weekday activity patterns",
xlab="5-min Interval", ylab="Number of Steps")
points(act_data_weekday$interval, act_data_weekday$steps, col = alpha("light blue", 0.25), pch=16)
# plot the averages
lines(names(mean_steps_per_interval_weekend), mean_steps_per_interval_weekend, lwd=3, col="red")
lines(names(mean_steps_per_interval_weekday), mean_steps_per_interval_weekday, lwd=3, col="blue")
# add a legend for lines
legend(83.67, 744.41, c("Weekend","Weekday"), lwd=c(3,3),col=c("red","blue"))
